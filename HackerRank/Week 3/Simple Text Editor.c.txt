#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
char* my_strdup(const char* s) {
    char* dup = (char*)malloc(strlen(s) + 1);
    if (dup) strcpy(dup, s);
    return dup;
}
typedef struct Node {
    char* state;
    struct Node* next;
} Node;

Node* push(Node* top, const char* s) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->state = my_strdup(s); // copy string
    newNode->next = top;
    return newNode;
}

Node* pop(Node* top, char** result) {
    if (top == NULL) return NULL;
    Node* temp = top;
    *result = top->state;
    top = top->next;
    free(temp);
    return top;
}

int main() {
int Q;
    scanf("%d", &Q);

    char S[1000001]; 
    S[0] = '\0';

    Node* stack = NULL;
    stack = push(stack, S); 

    for (int i = 0; i < Q; i++) {
        int type;
        scanf("%d", &type);

        if (type == 1) { 
            char W[1000001];
            scanf("%s", W);
            strcat(S, W);
            stack = push(stack, S);

     }  else if (type == 2) { 
    int k;  
    scanf("%d", &k);
    int len = strlen(S);
    if (k <= len) {
        S[len - k] = '\0';
    } else {
        S[0] = '\0';
    }
    stack = push(stack, S);

} else if (type == 3) { // print
    int k;   // declare k here also
    scanf("%d", &k);
    printf("%c\n", S[k - 1]);


        } else if (type == 4) { 
            char* prev;
            stack = pop(stack, &prev); 
            free(prev);
            strcpy(S, stack->state);   
        }
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
